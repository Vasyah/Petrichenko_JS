{"version":3,"sources":["scripts/index.js"],"names":["TimeOut","setTimeout","console","log","clg","timeOut1","callback","callBack1"],"mappings":"AAAA;AAEA,SAASA,OAAT,GAAmB;AACfC,EAAAA,UAAU,CAAC,YAAY;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACH,GAFS,EAEP,IAFO,CAAV;AAGH;;AAED,SAASC,GAAT,GAAe;AACXF,EAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACH,EAED;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA,SAASE,QAAT,CAAkBC,QAAlB,EAA4B;AACxBJ,EAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACAG,EAAAA,QAAQ;AACX;;AAED,SAASC,SAAT,GAAqB;AACjBL,EAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACH;;AAEDE,QAAQ,CAACE,SAAD,CAAR","file":"scripts.bcf3243b.js","sourceRoot":"..","sourcesContent":["// проверим последовательность выпонления следующих функций\n\nfunction TimeOut() {\n    setTimeout(function () {\n        console.log(1);\n    }, 1000);\n}\n\nfunction clg() {\n    console.log(2);\n}\n\n// TimeOut();\n// clg();\n\n// как видно из результатов консоля, сперва у нас выведетеся 2,\n// а затем 1, это связано с тем, что функция setTimeout запускает\n// определённый счётчик, который достигнув опр. значение выполнит функцию\n// а до этого момента он отдаёт управление основной программе\n\n// Для четкого прогнозирования порядка выполнения функций, используются callback-функции\n\n\nfunction timeOut1(callback) {\n    console.log(1);\n    callback();\n}\n\nfunction callBack1() {\n    console.log(2);\n}\n\ntimeOut1(callBack1);\n\n\n"]}